# src/cmp_copilot/agents/state.py

from typing import TypedDict, List, Dict, Annotated, Tuple
import operator

def add_messages(left: List, right: List) -> List:
    """Helper function to append messages for LangGraph state."""
    return left + right

class AgentState(TypedDict):
    """
    Defines the structure of the agent's memory or "state".

    This TypedDict is passed between all the nodes in the LangGraph. Each node
    can read from it and write to it, allowing the agent to build up information
    and context as it executes a task.
    """
    
    # The initial, unmodified query from the user.
    user_query: str
    
    # A structured plan generated by the Supervisor node.
    # Example: {'action': 'security_scan', 'playbook': 'openscap_scan.yml', 'filters': {}}
    plan: Dict
    
    # A list of VM objects discovered by the Discovery node.
    # Each dict will contain standardized info like id, name, ip_address.
    target_vms: List[Dict]
    
    # A list of dictionaries, where each dict contains the vm_name and the
    # local file path to its generated scan report.
    scan_results: Annotated[list, operator.add]
    
    # A log of non-fatal errors encountered during the workflow.
    error_log: Annotated[list, operator.add]
    
    # The final, human-readable summary generated by the Analysis node.
    final_summary: str
    
    # A flag to confirm the final notification email has been sent.
    email_sent: bool
    
    # A running history of all messages for the streaming UI.
    # The tuple format (source, content) helps identify who said what.
    messages: Annotated[List[Tuple[str, str]], add_messages]

